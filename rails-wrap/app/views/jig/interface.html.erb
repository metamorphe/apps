
<script type="text/javascript">
// .d8888.  .o88b. d8888b. d888888b d8888b. d888888b 
// 88'  YP d8P  Y8 88  `8D   `88'   88  `8D `~~88~~' 
// `8bo.   8P      88oobY'    88    88oodD'    88    
//   `Y8b. 8b      88`8b      88    88~~~      88    
// db   8D Y8b  d8 88 `88.   .88.   88         88    
// `8888Y'  `Y88P' 88   YD Y888888P 88         YP    
                                                  
  var design = <%= @design %>;
  var designer, sys, zoom, materials, storage, alerter, guide, debug;
  var graph;


  var modes = {
    // edit: "rgb(207, 244, 255)", 
    edit: {color: "rgb(92, 184, 92)", dom: '#add-library, #dev-toolbox, #system-messages, #history-bar, #artwork-toolbox, #canvas-toolbox, #big-undo, #clear-canvas-and-history,  #circuit-toolbox'}, 
    validate: {color:"rgb(66, 139, 202)", dom: '#debug-guide'}, 
    make: {color:"rgb(217, 83, 79)", dom: '#fab-guide'}
  };

  var current_mode = "edit";
  function modify(){
    $('#make-design, #validate-design, #edit-design').click(function(){
      var mode = $(this).attr('data-mode');
      $('#interface-container').css("background", modes[mode].color);
      for(var i in modes){
        if(i == mode){
          $(modes[i].dom).show();
        }else{
          $(modes[i].dom).hide();
        }
      }
      current_mode = mode;
    });
    $('#edit-design').click();
  }
  $(function(){
    modify();
    attachHandlers();
    // dim = new DimensionsPreview($("#sandbox"));
    // dim.dom.css({
    //   bottom: 0, 
    //   right: 0, 
    //   left: "auto", 
    //   top: "auto"
    // });
    // dim.set(0, 0, 0);
    
    sys = new SystemMessageManager($('#system-messages'));

    storage = new WebStorage();
    designer = new CircuitDesigner($("#sandbox"));
    hm = new HistoryManager(storage);
    graph = new Graph();
    // Graph.test();
    // Graph.printIDs();
  

    zoom = new Zoom(designer.paper.view.zoom, designer.paper);
    guide = new FabricationGuide($("#fab-guide"));
    debug = new DebugGuide($("#debug-guide"));

   

    alerter = new Alerter($('#alerter'));
    // AUTOSAVE
    // setInterval(function(){ 
    //   hm.save();
    //   sys.log("Design auto-saved!");
    // }, 10000);
    // END AUTOSAVE

    // collections.switchTo("Artwork")
    // dropLogic();
    // designer.addSVG("/primitives/PrettyCircuit_Bird.svg", paper.view.center);
    zoom.home();
  });

  getActiveTool = function(){ return paper.tool.toolholder; }
  
  function attachHandlers(){
  
    

    // BRUSH CONTROLS
    $('#brush-size-increase').click(function(){
      if(TracePathTool.BRUSH_SIZE + 1 > TracePathTool.MAX_BRUSH_SIZE){
        sys.show("The maximum brush size ("+TracePathTool.MAX_BRUSH_SIZE+") has been reached!")
        return;
      }
      TracePathTool.BRUSH_SIZE ++;
      sys.show("Brush size set to: " + TracePathTool.BRUSH_SIZE);
    });  

    $('#brush-size-decrease').click(function(){
      if(TracePathTool.BRUSH_SIZE - 1  < TracePathTool.MIN_BRUSH_SIZE){
        sys.show("The minumum brush size ("+TracePathTool.MIN_BRUSH_SIZE+") has been reached!")
        return;
      }
      TracePathTool.BRUSH_SIZE --;
      sys.show("Brush size set to: " + TracePathTool.BRUSH_SIZE);
    });  


    $('#ghost').click(function(){
      if($(this).hasClass("btn-warning"))
        sys.log("Deghosting the artwork!");
      else
        sys.log("Ghosting the artwork!");

      $(this).toggleClass("btn-warning");
      designer.art_layer.ghostify();
    });
    $('#lock').click(function(){
       if($(this).hasClass("btn-warning"))
        sys.log("Unlocking the artwork. It can now be moved.");
      else
        sys.log("Locking the artwork.");
      $(this).toggleClass("btn-warning");
      ArtworkLayer.scaleable = !ArtworkLayer.scaleable;
      ArtworkLayer.translateable = !ArtworkLayer.translateable;
      ArtworkLayer.rotateable = !ArtworkLayer.rotateable;
    });
     $('#save-progress').click(function(){
      hm.save();
     });
     $('#undo').click(function(){
      hm.undo();
      // designer.findRoot();
     });
     $('#redo').click(function(){
      hm.redo();
      // designer.nextNode();
     });
     $('#revert').click(function(){
      hm.revert();
     });
     $('#fast-forward').click(function(){
      hm.fast_forward();
     });
     $('#clear-history').click(function(){
      hm.clear_history();
     });      
    
  }




</script>


<!-- 
db   db d888888b .88b  d88. db      
88   88 `~~88~~' 88'YbdP`88 88      
88ooo88    88    88  88  88 88      
88~~~88    88    88  88  88 88      
88   88    88    88  88  88 88booo. 
YP   YP    YP    YP  YP  YP Y88888P  
-->
<div id="interface-container" class="row">   

 
  <%= render :partial => "toolbox" %>
  <div id="alert-container" class="col-xs-3 pull-right">
    <div id="alerter" class="alert alert-danger alert-dismissible fade in" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">Ã—</span></button>
        <h4>Oh snap! That's no bueno!</h4>
        <p id='message'>Change this and that and try again. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.</p>
        <p>
          <button id="action" type="button" class="btn btn-xs btn-danger" data-dismiss="alert">Take this action</button>
          <button id="auto" type="button" class="btn btn-xs btn-default">Do this for me always.</button>
        </p>
        <p>
          <button id="silence" type="button" class="btn btn-xs btn-default">Don't tell me again</button>
        </p>
      </div>
  </div>
  <%= render :partial => "toolbar" %>
  <% render :partial => "toolbox" %>
  <%= render :partial => "debug" %>
  <%= render :partial => "fab_guide" %>
  <%= render :partial => "calibration_modal" %>
  <%= render :partial => "conductivity_modal" %>
  <%= render :partial => "system_dialog" %>
  <%= render :partial => "thumbui"%>
  <div id="sandbox" class="col-xs-12">
    <!-- <canvas id="sandboxy" resize></canvas> -->
  </div>
  <% render :partial => "sidebar" %>
<%= render 'collection'%>
